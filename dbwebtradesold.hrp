
#ifndef __GNET_DBWEBTRADESOLD_HPP
#define __GNET_DBWEBTRADESOLD_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbwebtradesoldarg"
#include "dbwebtradesoldres"

#include "sold_re.hpp"
#include "mapforbid.h"

namespace GNET
{

class DBWebTradeSold : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbwebtradesold"
#undef	RPC_BASECLASS
	int zoneid;
	int64_t orderid;
	int64_t timestamp;
	int userid;
	bool userid_mismatch;
	bool roleid_mismatch;
/*
Sold_Re
0.成功； 
1.sn不存在（平台退款）；
2.物品已卖出（平台认为成功，不再重发）； 
3.其他错误（重发）
4.找不到买家（平台退款）； 
5. 向游戏服务器发送数据失败（重发）； 
6. 游戏端根据sn查到的sellerroleid不存在（可能是角色已删除或是回档期间建立的角色，gs和平台忽略该错误，平台认为成功，不重发）；
7.物品在游戏内处于“与平台同步中”的状态 （即游戏内物品处于“与平台同步中”的状态时，不再处理平台发来的逻辑，直接返回本错误码，直到收到平台返回的Re，平台收到该错误码后不作任何处理，重发）；
8．游戏根据sn查到的selleruserid与平台指定的selleruserid不一致（暂时忽略该错误，gs和平台忽略该错误，平台认为成功，不重发）；
9．游戏根据sn查到的sellerroleid与平台指定的sellerroleid不一致（暂时忽略该错误，gs和平台忽略该错误，平台认为成功，不重发）；
10.协议中发送的buyerrolied与buyeruserid不匹配（很大可能是合服过程中买家roleid发生变化，平台认为成功，不重发，记log）；
11 是邮箱已满
12 超过帐号容纳角色限制
13 角色交易指定买家找不到，平台退款，继续交易
14 角色交易卖的角色找不到，平台退款，物品废除
15 不符合出售条件，退款
-1. 游戏服务器处理失败（重发）；
*/

	void SendResult(int retcode,int roleid, int64_t sn, int buyer_roleid, int buyer_userid)
	{
		GWebTradeClient::GetInstance()->SendProtocol(Sold_Re(zoneid,userid,roleid,buyer_userid,buyer_roleid,sn,retcode,orderid));	
	}

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBWebTradeSoldArg *arg = (DBWebTradeSoldArg *)argument;
		// DBWebTradeSoldRes *res = (DBWebTradeSoldRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		DBWebTradeSoldArg *arg = (DBWebTradeSoldArg *)argument;
		DBWebTradeSoldRes *res = (DBWebTradeSoldRes *)result;
		
		GWebTradeDetail detail;
		if(WebTradeMarket::GetInstance().GetWebTrade(arg->sn,detail))
		{
			if(detail.info.posttype == 4)
			{
				//因为买家卖家的base表数据发生改变，所以要清空rbcache
				if(res->retcode == ERR_SUCCESS)
				{
					GDeliveryServer* dsm=GDeliveryServer::GetInstance();
					dsm->rbcache.remove(arg->roleid);
					dsm->rbcache.remove(res->buyer_roleid);
				}
				//买家账号解锁
				ForbiddenUsers::GetInstance().Pop(arg->buyer_userid);
			}
		}
		if(res->retcode == ERR_SUCCESS)
		{
			if(!WebTradeMarket::GetInstance().OnDBSold(arg->roleid, arg->sn))
			{
				WebTradeMarket::GetInstance().ClearBusy(arg->sn);
				Log::log(LOG_WARNING,"dbwebtradesold: OnDBSold failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			}
			PostOffice::GetInstance().AddNewMail( res->inform_seller.receiver,res->inform_seller );
			PostOffice::GetInstance().AddNewMail( res->inform_buyer.receiver,res->inform_buyer );
			if(arg->buyer_roleid != res->buyer_roleid)
				SendResult(10,arg->roleid,arg->sn,res->buyer_roleid,arg->buyer_userid);	//通知Tradeserver成功
			else if(userid_mismatch)
				SendResult(8,arg->roleid,arg->sn,res->buyer_roleid,arg->buyer_userid);	//通知Tradeserver成功
			else if(roleid_mismatch)
				SendResult(9,arg->roleid,arg->sn,res->buyer_roleid,arg->buyer_userid);	//通知Tradeserver成功
			else
				SendResult(0,arg->roleid,arg->sn,res->buyer_roleid,arg->buyer_userid);	//通知Tradeserver成功
		}
		else if(res->retcode == ERR_WT_BUYER_NOT_EXIST)
		{
			WebTradeMarket::GetInstance().ClearBusy(arg->sn);
			Log::log(LOG_WARNING,"dbwebtradesold: failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			SendResult(4,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver买家不存在
		}
		else if(res->retcode == ERR_WT_BUYER_NOT_EXIST_2)
		{
			WebTradeMarket::GetInstance().ClearBusy(arg->sn);
			Log::log(LOG_WARNING,"dbwebtradesold: failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			SendResult(13,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver买家不存在
		}
		else if(res->retcode == ERR_WT_SELLER_NOT_EXIST)
		{
			WebTradeMarket::GetInstance().ClearBusy(arg->sn);
			Log::log(LOG_WARNING,"dbwebtradesold: failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			SendResult(14,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver买家不存在
		}
		else if(res->retcode == ERR_WT_BUYER_CONDITION_NOT_MATCH)
		{
			WebTradeMarket::GetInstance().ClearBusy(arg->sn);
			Log::log(LOG_WARNING,"dbwebtradesold: failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			SendResult(15,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver买家不存在
		}
		else
		{
			WebTradeMarket::GetInstance().ClearBusy(arg->sn);
			Log::log(LOG_WARNING,"dbwebtradesold: failed. sn=%lld,roleid=%d", arg->sn,arg->roleid);
			SendResult(-1,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver重发
		}
	}

	void OnTimeout()
	{
		// TODO Client Only
		DBWebTradeSoldArg *arg = (DBWebTradeSoldArg *)argument;
		Log::log(LOG_ERR,"dbwebtradesold: timeout. sn=%lld,roleid=%d", arg->sn,arg->roleid);
		GWebTradeDetail detail;
		if(WebTradeMarket::GetInstance().GetWebTrade(arg->sn,detail))
		{
			if(detail.info.posttype == 4)
				ForbiddenUsers::GetInstance().Pop(arg->buyer_userid);
		}
		WebTradeMarket::GetInstance().ClearBusy(arg->sn);
		SendResult(-1,arg->roleid,arg->sn,arg->buyer_roleid,arg->buyer_userid);	//通知Tradeserver重发
	}

};

};
#endif
